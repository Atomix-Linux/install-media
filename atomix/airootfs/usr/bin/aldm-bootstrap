#! /bin/bash

set -e

# Check if script is run as root
if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

MOUNT_PATH=/tmp/aldm_root

# Prepare device list for selection
device_list=()
device_output=`lsblk --list -n -o name,model,size,type | grep disk | tr -s ' ' '\t'`

while read -r line; do
	name=/dev/`echo "$line" | cut -f 1`
	model=`echo "$line" | cut -f 2`
	size=`echo "$line" | cut -f 3`
	device_list+=($name)
	device_list+=("$model ($size)")
done <<< "$device_output"

# Select target disk
DISK=$(whiptail --nocancel --menu "Choose a disk to install to:" 20 50 5 "${device_list[@]}" 3>&1 1>&2 2>&3)

# Check for existing installation (both modes)
REPAIR=false
if (blkid -s LABEL | grep -q 'aldm_root') || (blkid -s LABEL | grep -q 'EFI'); then
    echo "Existing installation found"
    if (whiptail --yesno --yes-button "Repair" --no-button "Clean" "WARNING: $DISK appears to already have a system installed. Would you like to repair it or do a clean install?\n\nNOTE: A clean install will delete everything on the disk, but a repair install will preserve your user data." 13 70); then
        echo "User chose to do a repair install"
        REPAIR=true
    else
        echo "User chose to do a clean install"
    fi
else
    echo "Existing installation not found"
fi

########## REPAIR INSTALL (for both modes)
if [ "${REPAIR}" == true ]; then
    mkdir -p ${MOUNT_PATH}

    # Find partitions by label
    ROOT_PART=$(blkid -L aldm_root)
    EFI_PART=$(blkid -L EFI)

    if [ -z "$ROOT_PART" ] || [ -z "$EFI_PART" ]; then
        echo "ERROR: Required partitions not found for repair"
        exit 1
    fi

    # Mount partitions
    mount ${ROOT_PART} ${MOUNT_PATH}
    mount -t vfat ${EFI_PART} ${MOUNT_PATH}/boot/

    # Clean boot and reinstall bootloader
    rm -rf ${MOUNT_PATH}/boot/*
    bootctl --esp-path=${MOUNT_PATH}/boot/ install

    # Clean system configuration
    echo "Deleting subvolume..."
    btrfs subvolume delete ${MOUNT_PATH}/deploys/* || true
    rm -rf ${MOUNT_PATH}/etc/*

    # Unmount and exit
    umount -R ${MOUNT_PATH}
    echo "Repair completed successfully!"
    exit 0
fi

# Select installation mode
INSTALL_MODE=$(whiptail --nocancel --menu "Choose installation mode:" 15 50 2 \
	"Quick" "Erase entire disk and install" \
	"Advanced" "Manual partitioning (cfdisk)" 3>&1 1>&2 2>&3)

########## ADVANCED MODE (manual partitioning)
if [ "$INSTALL_MODE" == "Advanced" ]; then
  cfdisk "${DISK}"
  # Zbi√≥r partycji
  partition_list=()
  while IFS= read -r part; do
    partition_list+=("/dev/$part" "")
  done < <(lsblk -ln -o NAME,TYPE "${DISK}" | awk '$2=="part"{print $1}')

  ROOT_PART=$(whiptail --nocancel --menu "Select SYSTEM partition:" 20 60 5 "${partition_list[@]}" 3>&1 1>&2 2>&3)
  if whiptail --yesno "Format ${ROOT_PART} as Btrfs?" 10 50; then
    FORMAT_ROOT=true
  else
    FORMAT_ROOT=false
  fi

  EFI_PART=$(whiptail --nocancel --menu "Select EFI partition:" 20 60 5 "${partition_list[@]}" 3>&1 1>&2 2>&3)
  if whiptail --yesno "Format ${EFI_PART} as FAT32?" 10 50; then
    FORMAT_EFI=true
  else
    FORMAT_EFI=false
  fi

  whiptail --yesno "WARNING: SYSTEM=${ROOT_PART} ${FORMAT_ROOT:+[format]}, EFI=${EFI_PART} ${FORMAT_EFI:+[format]}\n\nContinue?" 15 60 || { echo "Aborted"; exit 1; }

  mkdir -p "${MOUNT_PATH}"

  if [ "$FORMAT_ROOT" = true ]; then
    mkfs.btrfs -f "${ROOT_PART}"
  fi
  mount -t btrfs -o nodatacow "${ROOT_PART}" "${MOUNT_PATH}"

  if [ "$FORMAT_EFI" = true ]; then
    mkfs.vfat -F 32 "${EFI_PART}"
  fi
  btrfs filesystem label ${MOUNT_PATH} aldm_root
  dosfslabel "${EFI_PART}" EFI
  mkdir -p "${MOUNT_PATH}/boot"
  mount -t vfat "${EFI_PART}" "${MOUNT_PATH}/boot"

########## QUICK MODE (automatic partitioning)
else
	# Confirmation before disk wipe
	if ! (whiptail --yesno "WARNING: $DISK will now be formatted. All data on the disk will be lost. Do you wish to proceed?" 10 50); then
		echo "Installation aborted"
		exit 1
	fi

	# Automatic partitioning
	mkdir -p ${MOUNT_PATH}
	parted --script ${DISK} \
		mklabel gpt \
		mkpart primary fat32 1MiB 512MiB \
		set 1 esp on \
		mkpart primary 512MiB 100%

	PART1=$(fdisk -o Device --list ${DISK} | grep "^${DISK}.*1$")
	PART2=$(fdisk -o Device --list ${DISK} | grep "^${DISK}.*2$")

	# Format partitions
	mkfs.btrfs -L aldm_root -f ${PART2}
	mount -t btrfs -o nodatacow ${PART2} ${MOUNT_PATH}
	mkfs.vfat ${PART1}
	dosfslabel ${PART1} EFI
	mkdir -p ${MOUNT_PATH}/boot
	mount -t vfat ${PART1} ${MOUNT_PATH}/boot/
fi

########## COMMON INSTALLATION STEPS (both modes)
# Create Btrfs subvolumes
if btrfs subvolume show ${MOUNT_PATH}/var &>/dev/null; then
    btrfs subvolume delete ${MOUNT_PATH}/var
fi

if btrfs subvolume show ${MOUNT_PATH}/home &>/dev/null; then
    btrfs subvolume delete ${MOUNT_PATH}/home
fi

btrfs subvolume create ${MOUNT_PATH}/var
btrfs subvolume create ${MOUNT_PATH}/home


# Create user directory
USERNAME=user
if [ ! -z $1 ]; then
	USERNAME=$1
fi
mkdir -p ${MOUNT_PATH}/home/${USERNAME}
chown 1000:1000 ${MOUNT_PATH}/home/${USERNAME}

# Create system directories
mkdir -p ${MOUNT_PATH}/etc
mkdir -p ${MOUNT_PATH}/.etc

# Install bootloader
bootctl --esp-path=${MOUNT_PATH}/boot/ install
parted ${DISK} set 1 boot on
